sudo apt install libffi-dev
sudo apt install libsndfile1
sudo apt install libportaudio2
pip install numpy
pip install sounddevice
pip install pysoundfile

so:

aplay day-i-die.wav

works fine.

But in both Python and IPython shells, the following hangs a few tens of seconds into the song:

>>> import soundfile as sf
>>> data, samplerate = sf.read("day-i-die.wav")
>>> import sounddevice as sd
>>> sd.play(data, samplerate)
>>>
^C^C^C^C^Z
[1]+  Stopped                 python
(sound-play) giles@pedro:~/sound-play$ kill -9 %1

sd.stop() also hangs and can't be interrupted by ^C

also

(sound-play) giles@pedro:~/sound-play$ cat > test.py
import soundfile as sf
import sounddevice as sd
data, samplerate = sf.read("day-i-die.wav")
sd.play(data, samplerate)
input("Hit enter when done")
(sound-play) giles@pedro:~/sound-play$ python test.py

...note it doesn't print out the prompt.  Also hangs about ten second in

^CTraceback (most recent call last):
  File "test.py", line 5, in <module>
    input("Hit enter when done")
KeyboardInterrupt
^C

...so it clearly is reaching the input, not sure why it's not displaying anything.

Worth noting there's no volume control in sounddevice because it's just a wrapper on top of portaudio, which doesn't provide one.

pyalsaaudio by contrast has a mixer interface, which presumably can talk to the sound device's built-in volume -- better to do the volume changes in analog-land to avoid losing resolution

TBH it feels like pyalsaaudio is the way to go

pip install pyalsaaudio

Downloaded the raw playwav.py file from their github, changed to make it compatible with Python 3 (needed an integer division) and it worked!

Feels nice -- less magic.   Control-C works (played again after first complete runthrough to check), no weird uninterruptable programs or anything like that.  You just tell it what bytes to play and it plays them.

Hard to find a good mp3 library in Python, though!  All of the ones I can find seem to shell out to ffmpeg, which is silly.

Aha!  Roberto De Ioris of uWSGI fame has written a wrapper for libmpg123: https://github.com/20tab/mpg123-python/blob/master/examples/mp3_to_wave.py -- and that's one of the libaries used by the node-lame converter the current speaker uses.

pip install mpg123

Hacked together a simple thing based on the playwav from pyalsaaudio to try it out

(sound-play) giles@pedro:~/sound-play$ python playmp3.py day-i-die.mp3
Traceback (most recent call last):
  File "playmp3.py", line 64, in <module>
    mp3 = Mpg123(args[0])
  File "/home/giles/.virtualenvs/sound-play/lib/python3.6/site-packages/mpg123.py", line 110, in __init__
    self._lib = self.init_library(library_path)
  File "/home/giles/.virtualenvs/sound-play/lib/python3.6/site-packages/mpg123.py", line 99, in init_library
    raise self.LibInitializationException('libmpg123 not found')
mpg123.LibInitializationException: libmpg123 not found

...but it looks like I still need to install libmp3 because the node thing came with its own pre-installed version

sudo apt install libmpg123-dev

2 channels, 44100 sampling rate, 208 encoding

...comes back from

rate, channels, encoding = mp3.get_format()

print("{} channels, {} sampling rate, {} encoding".format(
    channels, rate, encoding
))
# Set attributes
device.setchannels(channels)
device.setrate(rate)

208 is some kind of mp3-specific encoding identifier.  The following code seems to work OK:

#!/usr/bin/env python

# Simple test script that plays (some) wav files

from __future__ import print_function

import sys
from mpg123 import Mpg123
import getopt
import alsaaudio

def play(device, mp3):
    rate, channels, encoding = mp3.get_format()

    print("{} channels, {} sampling rate, {} encoding".format(
        channels, rate, encoding
    ))

    width = mp3.get_width_by_encoding(encoding)
    print("width comes out as {}".format(width))

    # Set attributes
    device.setchannels(channels)
    device.setrate(rate)

    # 8bit is unsigned in wav files
    if width == 1:
        device.setformat(alsaaudio.PCM_FORMAT_U8)
    # Otherwise we assume signed data, little endian
    elif width == 2:
        device.setformat(alsaaudio.PCM_FORMAT_S16_LE)
    elif width == 3:
        device.setformat(alsaaudio.PCM_FORMAT_S24_3LE)
    elif width == 4:
        device.setformat(alsaaudio.PCM_FORMAT_S32_LE)
    else:
        raise ValueError('Unsupported format')

    periodsize = int(rate / 8)

    device.setperiodsize(periodsize)

    for frame in mp3.iter_frames():
        device.write(frame)


def usage():
    print('usage: playwav.py [-d <device>] <file>', file=sys.stderr)
    sys.exit(2)

if __name__ == '__main__':

    device = 'default'

    opts, args = getopt.getopt(sys.argv[1:], 'd:')
    for o, a in opts:
        if o == '-d':
            device = a

    if not args:
        usage()

    mp3 = Mpg123(args[0])
    device = alsaaudio.PCM(device=device)

    play(device, mp3)


------


Let's try FLAC.  The problem is that soudfile appears to be everyone's go-to for this format, but it returns the sample data in numpy arrays, normalized to the size of the data format you ask for it in:

In [1]: import soundfile

In [2]: f = soundfile.SoundFile("sea-of-love.flac")

In [3]: f.subtype
Out[3]: 'PCM_24'

In [4]: data = f.read()

In [5]: data
Out[5]:
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       ...,
       [0., 0.],
       [0., 0.],
       [0., 0.]])

In [6]: import numpy as np

In [7]: np.amax(data, 1)
Out[7]: array([0., 0., 0., ..., 0., 0., 0.])

In [8]: np.amax(data)
Out[8]: 0.9635502099990845

...

In [13]: f.close()

In [14]: f = soundfile.SoundFile("sea-of-love.flac")

In [15]: data = f.read(dtype="int32")

In [16]: np.amax(data)
Out[16]: 2069208320

In [17]: 2**24
Out[17]: 16777216

In [18]: 2**31
Out[18]: 2147483648

In [19]: f.close()

....and I just want the raw data that I can send to alsa.

Let's try pyogg:

sudo apt install libflac-dev

In [1]: import pyogg
^[[A
In [2]: pyogg.FlacFile("sea-of-love.flac")
---------------------------------------------------------------------------
PyOggError                                Traceback (most recent call last)
<ipython-input-2-b41d551ded14> in <module>
----> 1 pyogg.FlacFile("sea-of-love.flac")

~/.virtualenvs/sound-play/lib/python3.6/site-packages/pyogg/__init__.py in __init__(*args, **kw)
    411     class FlacFile:
    412         def __init__(*args, **kw):
--> 413             raise PyOggError("The FLAC libraries weren't found or couldn't be loaded (maybe you're trying to use 64bit libraries with 32bit Python?)")
    414
    415     class FlacFileStream:

PyOggError: The FLAC libraries weren't found or couldn't be loaded (maybe you're trying to use 64bit libraries with 32bit Python?)

In [3]:

hmmmm

Ah, it's a bug -- they're looking for libflac but the library is called libFLAC.  After fixing that, though, it can't parse the file.   Looks kind of broken

Well, what a mess!

Ah, wait -- no, it parsed it.   It was just rather slow -- but that's fair enough, it's reading the whole thing into memory from a slow SD.

However, it's still not bytes, and I'm not sure how it's formatted:

In [10]: type(flac.buffer[0])
Out[10]: int

In [11]: flac.buffer_length
Out[11]: 85032960

In [12]: flac.total_samples
Out[12]: 21258240

In [13]: flac.buffer_length / flac.total_samples
Out[13]: 4.0

In [14]: while i < flac.buffer_length:
    ...:     print("{} {} {} {}".format(flac.buffer[i], flac.buffer[i+1], flac.buffer[i+2], flac.buffer[i+3]))
    ...:     i += 4
    ...:

...

-22899 -32070 -16750 5805
-8600 -14331 -9028 20817
-8529 -9409 -4582 32660
-807 31923 15247 -15753
-20476 -1364 17628 19333
415 -6367 -6512 -10602
-6411 6678 2704 21937
13579 25791 7488 21427
-2002 15766 -7897 18246
32139 11808 -12910 -12400
.....

Let's look at the actual source code for the C implementation, along with its examples.

Ah, wait -- two channels!  So those are something like

-22899 -32070 -- left
-16750 5805 - right

...?

But some pairs still look too big to be 24-bit numbers.


Hmph.  Well, let's at least try to get a 24-bit flac playing.

sudo apt install flac
flac -d sea-of-love.flac
aplay sea-of-love.wav

Works!  Now, let's try playing to FLAC directly

sudo apt-get install mplayer
mplayer sea-of-love.flac

Works!

But initially:

(sound-play) giles@pedro:~/sound-play$ python playwav.py sea-of-love.wav
2 channels, 96000 sampling rate
24-bit
Traceback (most recent call last):
  File "playwav.py", line 67, in <module>
    play(device, f)
  File "playwav.py", line 30, in play
    device.setformat(alsaaudio.PCM_FORMAT_S24_3LE)
AttributeError: module 'alsaaudio' has no attribute 'PCM_FORMAT_S24_3LE'
(sound-play) giles@pedro:~/sound-play$

Tried changing that to PCM_FORMAT_S24_LE but just get static.  Try changing to PCM_FORMAT_U24_LE and get static with what sounds like the music trying to get through.

Aha!  PCM_FORMAT_S24_LE is 24 bits stored one-per-32-bit word.  PCM_FORMAT_S24_3LE was entirely correct, but was only added to pyalsaaudio on 29 Aug 2017, and I pip installed it, which picked up a version from 24 Feb 2017.  Let's re-install from a git checkout.

...had to pip uninstall the old one as well, but it worked!

OK, so we can definitely play back 24-bit WAV files.

We just need to find out how to parse FLACs into the appropriate format.

things to look into:

https://nbviewer.jupyter.org/github/mgeier/python-audio/blob/master/audio-files/index.ipynb
https://github.com/Zuzu-Typ/PyOgg/
https://github.com/larsimmisch/pyalsaaudio/


After some thought -- ultimately, so long as PySoundFile is returning real data, then it's OK.  We can tell it to read it as 32-bit numbers, and then confirm that they really are the right numbers.  If they are, I think we can just send them straight to ALSA with the correct "this is 24-bit padded to 32-bit words with a zero at the end"

First check:

import soundfile
data, rate = soundfile.read("sea-of-love.flac", dtype="int32")
for a, b in data:
    print("{:02X} {:02X}".format(a, b))

...and we get numbers like

2E195400 34973200
2F10AE00 33110300
2FEE6A00 31A6E600
30E57E00 30542000
31D82000 2F21B600
32A41C00 2E2CE200

...they all end in "00".  So it looks like it's just padded it in the most obvious way :-)   Now let's check it against a WAV file that we created from the same FLAC using the flac command-line tool:

data2, rate2 = soundfile.read("sea-of-love.wav", dtype="int32")
for (a1, b1), (a2, b2) in zip(data, data2):
    if a1 != a2 or b1 != b2:
        print("{:02X} {:02X}".format(a1, b1))

...and it prints nothing out :-)



-----------------------

About a year later

## 2019-12-29, written up 2019-12-30)

Have been messing around with this again now that I have the hifi set up with the new Rega amp in the spare room.  New RPi 4, HifiBerry DigiPlus card providing S/PDIF output to a Schiit Modi 3 DAC.

The Python code that I have at this point can play the following files without problems:

no-commit-test-samples/day-i-die.flac:    FLAC audio bitstream data, 24 bit, stereo, 44.1 kHz, 11974620 samples
no-commit-test-samples/day-i-die.mp3:     Audio file with ID3 version 2.4.0, contains:MPEG ADTS, layer III, v1, 192 kbps, 44.1 kHz, JntStereo
no-commit-test-samples/day-i-die.wav:     RIFF (little-endian) data, WAVE audio, Microsoft PCM, 16 bit, stereo 44100 Hz
no-commit-test-samples/sea-of-love.flac:  FLAC audio bitstream data, 24 bit, stereo, 96 kHz, 21258240 samples
no-commit-test-samples/sea-of-love.wav:   RIFF (little-endian) data, WAVE audio, Microsoft PCM, 24 bit, stereo 96000 Hz

However, this higher-res one has a loud high-pitched hiss when played:

no-commit-test-samples/stabat-mater.flac: FLAC audio bitstream data, 24 bit, stereo, 192 kHz, 45641339 samples

I don't know why this is, but it only happens with my Python code -- with SoX's `play` command it sounds fine.

While investigating this, I found out how to show the actual sample rate being used by the card during playback, and found that it was maxing out at 48khz -- whichever way I played the music:

giles@pandora:~/speaker-server $ cat /proc/asound/sndrpihifiberry/pcm0p/sub0/hw_params
access: MMAP_INTERLEAVED
format: S16_LE
subformat: STD
channels: 2
rate: 48000 (48000/1)
period_size: 6000
buffer_size: 18000


note also 16-bit.

Investigation suggests that this might be an ALSA limitation on the Pi:

"Alsa driver limited to 16-bit / 48kHz audio files": open issue against raspberrypi/linux on GitHub: https://github.com/raspberrypi/linux/issues/494
Reference to using OpenMax instead of ALSA to work around this: https://www.raspberrypi.org/forums/viewtopic.php?t=65661
SO: "Not a single recent Ubuntu release allows you to change ALSA settings via configuration files. Apparently, ALSA will always resample everything to 48KHz/16bit and you're stuck to it. I must remind you that ALSA mixing and resampling algorithms are of very, very, low quality, similar to XP's KMixer.": https://askubuntu.com/a/245240 -- but also see comment "This is wrong nowadays. ALSA uses whatever sample format and rate the source is configured to. See [here](https://unix.stackexchange.com/questions/74558/change-sampling-rate-in-alsa/74569#74569)"
More Digi+ 192khz woes: https://support.hifiberry.com/hc/en-us/community/posts/205902015-192-kHz-24-bit-problem-with-Hifiberry-Digi-
The github issue suggests a kernel patch, and this support forum thread for a media player app suggests that they patch the kernel in some way for hi-res audio: https://www.max2play.com/en/forums/topic/hd-audio-192khz24-not-working-on-hifiberry-digi-pro/

Lots of people seem to be using Volumio for hi-res, and the technical overview for it at https://volumio.org/technical-overview/ suggests that it uses ALSA, so presumably they're patching it.



## 2019-12-30

But now it gets weirder.  While typing up the above, I re-ran some commands and played the problematic file again.  There was no hiss at all, and checking the output rate showed it was working fine!  When driving the Modi directly over USB:

giles@pandora:~ $ cat /proc/asound/card1/pcm0p/sub0/hw_params
access: RW_INTERLEAVED
format: S32_LE
subformat: STD
channels: 2
rate: 192000 (192000/1)
period_size: 24000
buffer_size: 96000

...and when going via the Digi+ S/PDIF:

giles@pandora:~ $ cat /proc/asound/card0/pcm0p/sub0/hw_params
access: MMAP_INTERLEAVED
format: S24_LE
subformat: STD
channels: 2
rate: 192000 (192000/1)
period_size: 24000
buffer_size: 48000


What happened overnight?  journalctl time

Looks like it rebooted at 2am, but that was (I think) my attempt to get things working with USB instead of S/PDIF, and I don't think it worked.  In fact, it must have been before I finished because my ssh sessions were still active, and one of them was showing a hw_params with 48khz from a test I ran then.

Overnight there's a lot of chatter about the random number generator building up its entropy, and this:

Dec 30 06:04:30 pandora systemd[1]: Starting Daily apt upgrade and clean activities...
Dec 30 06:04:32 pandora systemd[1]: apt-daily-upgrade.service: Succeeded.
Dec 30 06:04:32 pandora systemd[1]: Started Daily apt upgrade and clean activities.

I wonder if you need to do an apt-get upgrade after configuring the Digi+ in order to get the hi-res stuff working?  The upgrade I run as part of the system setup is during the initial setup, before the HiFiBerry stuff.  Also, the machine was set up on Dec 28 17:49.  Plenty of time for an upgrade.

Weird, though, as you would have thought that if it requires a kernel patch to get ALSA working, it would also require a reboot?

Well, although I'm loath to break a working system, we need to get to the bottom of this.  Let's try a repave and if it sounds staticy, see if an upgrade helps.

During rebuild: it reboots after installing the HifiBerry stuff, but I didn't see it do any upgrades.

Post rebuild:

Hiss on first play, and:

giles@pandora:~ $ cat /proc/asound/card0/pcm0p/sub0/hw_params
access: MMAP_INTERLEAVED
format: S16_LE
subformat: STD
channels: 2
rate: 48000 (48000/1)
period_size: 6000
buffer_size: 18000
giles@pandora:~ $

(speaker-server) giles@pandora:~/speaker-server $ sudo apt-get update
[sudo] password for giles:
Hit:1 http://archive.raspberrypi.org/debian buster InRelease
Get:2 http://raspbian.raspberrypi.org/raspbian buster InRelease [15.0 kB]
Fetched 15.0 kB in 1s (15.9 kB/s)
Reading package lists... Done
(speaker-server) giles@pandora:~/speaker-server $ sudo apt-get upgrade
Reading package lists... Done
Building dependency tree
Reading state information... Done
Calculating upgrade... Done
The following packages have been kept back:
  raspi-config
0 upgraded, 0 newly installed, 0 to remove and 1 not upgraded.

Hmmm.  No-op.

Another reboot?

No difference.

That's really weird!

What else did I do?  I tried running stuff through the USB... and in order to do that I changed the /etc/asound.conf and changed it to this:

pcm.!default {
    type hw
    card 1
}

ctl.!default {
    type hw
    card 1
}

...then changed it back.  But perhaps that did something?  I wish I'd made a record of its contents when the audio was working!

My current asound.conf is this:

pcm.hifiberry {
 type hw card 0
}

pcm.!default {
 type plug
 slave.pcm "dmixer"
}

pcm.dmixer {
 type dmix
 ipc_key 1024
 slave {
  pcm "hifiberry"
  channels 2
 }
}

ctl.dmixer {
 type hw
 card 0
}

...that mixer looks suspicious, perhaps it limits sample rate and bits per sample?

Let's see what happens if we switch to the other settings... change, reboot

(speaker-server) giles@pandora:~/speaker-server $ ./playflac.py no-commit-test-samples/stabat-mater.flac
Traceback (most recent call last):
  File "./playflac.py", line 52, in <module>
    device = alsaaudio.PCM(device=device)
alsaaudio.ALSAAudioError: No such file or directory [default]


(speaker-server) giles@pandora:~/speaker-server $ aplay -L
null
    Discard all samples (playback) or generate zero samples (capture)
default
sysdefault:CARD=sndrpihifiberry
    snd_rpi_hifiberry_digi,
    Default Audio Device
iec958:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    IEC958 (S/PDIF) Digital Audio Output
dmix:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct sample mixing device
dsnoop:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct sample snooping device
hw:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct hardware device without any conversions
plughw:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Hardware device with all software conversions
(speaker-server) giles@pandora:~/speaker-server $ ./playflac.py -d 'sysdefault:CARD=sndrpihifiberry' no-commit-test-samples/stabat-mater.flac
2 channels, 192000 sampling rate
^CTraceback (most recent call last):
  File "./playflac.py", line 54, in <module>
    play(device, flac)
  File "./playflac.py", line 32, in play
    device.write(frame.tobytes())
KeyboardInterrupt

No hiss!  And checking the /proc thing gets

giles@pandora:~ $ cat /proc/asound/card0/pcm0p/sub0/hw_params
access: MMAP_INTERLEAVED
format: S24_LE
subformat: STD
channels: 2
rate: 192000 (192000/1)
period_size: 24000
buffer_size: 48000


So we have our culprit.

So what was I trying to do with the old conf?  I think it's because the HifiBerry is/was something that gets owned by a program and I need to have multiple programs writing to it -- my speaker and perhaps the airplay thing and the barker and spotifyd, and some of these might not relinquish ownership when they're not using it.

Relevantly, from https://www.alsa-project.org/wiki/Asoundrc

"The dmix PCM name is already defined in the global configuration file /usr/share/alsa/alsa.conf.

- The default sample rate for this device is 48000Hz."

Looks like the config is copypasta from https://support.hifiberry.com/hc/en-us/articles/207397665-Mixing-different-audio-sources

Let's try to understand the file line by line

pcm.hifiberry {
 type hw card 0
}

from the docs, it looks like this is ill-formatted.  It should be

pcm.hifiberry {
 type hw
 card 0
}

...meaning that "hifiberry" is an alias for the hardware card zero.

This one is less clear from the docs:

pcm.!default {
 type plug
 slave.pcm "dmixer"
}

...but

pcm.!default {
 type plug

follows the same pattern as the earlier alias, and uses the magic `!default` alias name -- it means that we're defining an alias for !default pointing to a plugin.  It then makes sense that the next bit means "the one called dmixer"

The "dmix" example on https://www.alsa-project.org/wiki/Asoundrc has a similar stanza.

Now we have

pcm.dmixer {
 type dmix
 ipc_key 1024
 slave {
  pcm "hifiberry"
  channels 2
 }
}

This actually looks like a cut-down version of the dmix example on https://www.alsa-project.org/wiki/Asoundrc.  We have a pcm sink named dmixer (referenced in the default alias above) which is a dmix object.  As per https://unix.stackexchange.com/a/353267/144948

    ipc_key: dmix, dshare and dsnoop plugins allow multiple clients to communicate with a single source/sink. This communication is done via this key (IPC = Inter-Process Communication). So the key needs to be different for every plugin, no matter if you have several plugins for one soundcard or one plugin each for several soundcard, or you'll run into trouble.

...then we just say that its output is the "hifiberry" pcm device.

Finally we have this:

ctl.dmixer {
 type hw
 card 0
}

It looks like it's saying that the control device for the dmixer is the same as the one for card zero.  Not sure why we don't need a block like this:

pcm.!default {
 type plug
 slave.pcm "dmixer"
}

...for example

ctl.!default {
 type plug
 slave.ctl "dmixer"
}

...in order to wire it up as the default control device, though.

Anyway, in the light of the above, the example dmix config on https://www.alsa-project.org/wiki/Asoundrc makes sense:

pcm.!default {
        type plug
        slave.pcm "dmixer"
}

pcm.dmixer  {
        type dmix
        ipc_key 1024
        slave {
                pcm "hw:1,0"
                period_time 0
                period_size 1024
                buffer_size 4096
                rate 44100
        }
        bindings {
                0 0
                1 1
        }
}

ctl.dmixer {
        type hw
        card 0
}

They're skipping the initial alias, and have some more stuff in the dmixer block, but it's basically the same.

So let's try merging the two and bumping up the same rate.  According to https://www.alsa-project.org/alsa-doc/alsa-lib/pcm_plugins.html, "The resolution for 32-bit mixing is only 24-bit. The low significant byte is filled with zeros. The extra 8 bits are used for the saturation." -- so we should be OK for amplitude resolution.

So let's try this:

pcm.hifiberry {
    type hw
    card 0
}

pcm.!default {
    type plug
    slave.pcm "dmixer"
}

pcm.dmixer {
    type dmix
    ipc_key 1024
    slave {
        pcm "hifiberry"
        format S24_LE
        channels 2
        format S32_LE
        period_size 24000
        buffer_size 48000
        rate 192000
    }
    bindings {
        0 0
        1 1
    }
}

ctl.dmixer {
    type hw
    card 0
}

...where the rate is obvious, and the format and the period and buffer sizes come from that /proc output when I was playing stuff earlier.  buffer_time is removed because you're meant to specify either that or buffer_size

Let's give that a go.

After applying the config and rebooting:

(speaker-server) giles@pandora:~/speaker-server $ aplay -L
null
    Discard all samples (playback) or generate zero samples (capture)
hifiberry
default
dmixer
sysdefault:CARD=sndrpihifiberry
    snd_rpi_hifiberry_digi,
    Default Audio Device
iec958:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    IEC958 (S/PDIF) Digital Audio Output
dmix:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct sample mixing device
dsnoop:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct sample snooping device
hw:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Direct hardware device without any conversions
plughw:CARD=sndrpihifiberry,DEV=0
    snd_rpi_hifiberry_digi,
    Hardware device with all software conversions


No static when playing

giles@pandora:~ $ cat /proc/asound/card0/pcm0p/sub0/hw_params
access: MMAP_INTERLEAVED
format: S16_LE
subformat: STD
channels: 2
rate: 192000 (192000/1)
period_size: 24000
buffer_size: 48000

Can play from bot at the same time as playback!

So the only issue is that format, which is 16-bit.

Almost there...?

Ah, hang on -- there were two format strings in there, perhaps it treated that as an error and ignored both.  Let's drop the 32-bit one:

pcm.hifiberry {
    type hw
    card 0
}

pcm.!default {
    type plug
    slave.pcm "dmixer"
}

pcm.dmixer {
    type dmix
    ipc_key 1024
    slave {
        pcm "hifiberry"
        format S24_LE
        channels 2
        period_size 24000
        buffer_size 48000
        rate 192000
    }
    bindings {
        0 0
        1 1
    }
}

ctl.dmixer {
    type hw
    card 0
}

...reboot, and:

access: MMAP_INTERLEAVED
format: S24_LE
subformat: STD
channels: 2
rate: 192000 (192000/1)
period_size: 24000
buffer_size: 48000

w00t!

I think we may be all set.

